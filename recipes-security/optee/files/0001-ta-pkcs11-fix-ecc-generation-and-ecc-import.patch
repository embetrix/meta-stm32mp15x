From c40fcd5b1a0863fbcead71995b95f310b1c41552 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Vesa=20J=C3=A4=C3=A4skel=C3=A4inen?=
 <vesa.jaaskelainen@vaisala.com>
Date: Thu, 27 Jul 2023 15:48:50 +0300
Subject: [PATCH 1/5] ta: pkcs11: introduce PKCS11_CKF_ARRAY_ATTRIBUTE
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Add own define for PKCS11_CKF_ARRAY_ATTRIBUTE to keep attribute defines
clear.

Adjust users to new define.

Value is same as CKF_ARRAY_ATTRIBUTE in standard.

Signed-off-by: Vesa Jääskeläinen <vesa.jaaskelainen@vaisala.com>
---
 ta/pkcs11/include/pkcs11_ta.h | 25 ++++++++++++++-----------
 1 file changed, 14 insertions(+), 11 deletions(-)

diff --git a/ta/pkcs11/include/pkcs11_ta.h b/ta/pkcs11/include/pkcs11_ta.h
index 088c33ae7df..e87c6fd2e71 100644
--- a/ta/pkcs11/include/pkcs11_ta.h
+++ b/ta/pkcs11/include/pkcs11_ta.h
@@ -1039,6 +1039,12 @@ struct pkcs11_attribute_head {
 	uint8_t data[];
 };
 
+/**
+ * The PKCS11_CKF_ARRAY_ATTRIBUTE flag identifies an attribute which
+ * consists of an array of values.
+ */
+#define PKCS11_CKF_ARRAY_ATTRIBUTE	0x40000000UL
+
 /*
  * Attribute identification IDs as of v2.40 excluding deprecated IDs.
  * Valid values for struct pkcs11_attribute_head::id
@@ -1110,13 +1116,12 @@ enum pkcs11_attr_id {
 	PKCS11_CKA_EC_POINT			= 0x0181,
 	PKCS11_CKA_ALWAYS_AUTHENTICATE		= 0x0202,
 	PKCS11_CKA_WRAP_WITH_TRUSTED		= 0x0210,
-	/*
-	 * The leading 4 comes from the PKCS#11 spec or:ing with
-	 * CKF_ARRAY_ATTRIBUTE = 0x40000000.
-	 */
-	PKCS11_CKA_WRAP_TEMPLATE		= 0x40000211,
-	PKCS11_CKA_UNWRAP_TEMPLATE		= 0x40000212,
-	PKCS11_CKA_DERIVE_TEMPLATE		= 0x40000213,
+	PKCS11_CKA_WRAP_TEMPLATE		= PKCS11_CKF_ARRAY_ATTRIBUTE |
+						  0x0211,
+	PKCS11_CKA_UNWRAP_TEMPLATE		= PKCS11_CKF_ARRAY_ATTRIBUTE |
+						  0x0212,
+	PKCS11_CKA_DERIVE_TEMPLATE		= PKCS11_CKF_ARRAY_ATTRIBUTE |
+						  0x0213,
 	PKCS11_CKA_OTP_FORMAT			= 0x0220,
 	PKCS11_CKA_OTP_LENGTH			= 0x0221,
 	PKCS11_CKA_OTP_TIME_INTERVAL		= 0x0222,
@@ -1151,11 +1156,9 @@ enum pkcs11_attr_id {
 	PKCS11_CKA_REQUIRED_CMS_ATTRIBUTES	= 0x0501,
 	PKCS11_CKA_DEFAULT_CMS_ATTRIBUTES	= 0x0502,
 	PKCS11_CKA_SUPPORTED_CMS_ATTRIBUTES	= 0x0503,
-	/*
-	 * The leading 4 comes from the PKCS#11 spec or:ing with
-	 * CKF_ARRAY_ATTRIBUTE = 0x40000000.
+	PKCS11_CKA_ALLOWED_MECHANISMS		= PKCS11_CKF_ARRAY_ATTRIBUTE |
+						  0x0600,
 	 */
-	PKCS11_CKA_ALLOWED_MECHANISMS		= 0x40000600,
 	/* Vendor extension: reserved for undefined ID (~0U) */
 	PKCS11_CKA_UNDEFINED_ID			= PKCS11_UNDEFINED_ID,
 };

From afe541f8048c221c347b2d00c162dfe9c65de7a7 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Vesa=20J=C3=A4=C3=A4skel=C3=A4inen?=
 <vesa.jaaskelainen@vaisala.com>
Date: Thu, 27 Jul 2023 15:52:41 +0300
Subject: [PATCH 2/5] ta: pkcs11: specify OP-TEE's vendor specific attribute
 scheme
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Add vendor allocation specification for OP-TEE specific attributes.

Specifies which bits of attribute identifier is for what purpose.

Signed-off-by: Vesa Jääskeläinen <vesa.jaaskelainen@vaisala.com>
---
 ta/pkcs11/include/pkcs11_ta.h | 20 ++++++++++++++++++++
 1 file changed, 20 insertions(+)

diff --git a/ta/pkcs11/include/pkcs11_ta.h b/ta/pkcs11/include/pkcs11_ta.h
index e87c6fd2e71..dc535300b73 100644
--- a/ta/pkcs11/include/pkcs11_ta.h
+++ b/ta/pkcs11/include/pkcs11_ta.h
@@ -1039,12 +1039,32 @@ struct pkcs11_attribute_head {
 	uint8_t data[];
 };
 
+#define PKCS11_CKA_VENDOR_DEFINED	0x80000000UL
+
 /**
  * The PKCS11_CKF_ARRAY_ATTRIBUTE flag identifies an attribute which
  * consists of an array of values.
  */
 #define PKCS11_CKF_ARRAY_ATTRIBUTE	0x40000000UL
 
+/*
+ * OP-TEE's vendor specific PKCS#11 attribute allocation
+ *
+ * bit 31 - PKCS11_CKA_VENDOR_DEFINED
+ * bit 30 - PKCS11_CKF_ARRAY_ATTRIBUTE - works like in normal attributes
+ * bit 24-29 - reserved in case PKCS#11 standard starts to use them
+ * bit 16-24 - allocated for OP-TEE attribute flags
+ * bit 0-15 - allocated for attribute identifier
+ */
+
+/* OP-TEE attribute flags */
+
+/**
+ * Flags mask for checking if OP-TEE attribute flags are set.
+ */
+#define PKCS11_CKA_OPTEE_FLAGS_MASK	(PKCS11_CKA_VENDOR_DEFINED | \
+					 0x00FF0000UL)
+
 /*
  * Attribute identification IDs as of v2.40 excluding deprecated IDs.
  * Valid values for struct pkcs11_attribute_head::id

From c6cc8b74248f392f28f546d90dadbf3f1c6d1bbd Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Vesa=20J=C3=A4=C3=A4skel=C3=A4inen?=
 <vesa.jaaskelainen@vaisala.com>
Date: Thu, 27 Jul 2023 15:54:41 +0300
Subject: [PATCH 3/5] ta: pkcs11: add OP-TEE hidden attribute extension
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Attributes which has hidden OP-TEE vendor flag specified are not exported
to user space nor can be imported from user space.

Signed-off-by: Vesa Jääskeläinen <vesa.jaaskelainen@vaisala.com>
---
 ta/pkcs11/include/pkcs11_ta.h     |  8 ++++++++
 ta/pkcs11/src/attributes.c        |  4 ++++
 ta/pkcs11/src/object.c            |  9 +++++++++
 ta/pkcs11/src/pkcs11_attributes.c | 10 ++++++++++
 ta/pkcs11/src/pkcs11_attributes.h |  2 ++
 5 files changed, 33 insertions(+)

diff --git a/ta/pkcs11/include/pkcs11_ta.h b/ta/pkcs11/include/pkcs11_ta.h
index dc535300b73..291fcd2aaa8 100644
--- a/ta/pkcs11/include/pkcs11_ta.h
+++ b/ta/pkcs11/include/pkcs11_ta.h
@@ -1065,6 +1065,14 @@ struct pkcs11_attribute_head {
 #define PKCS11_CKA_OPTEE_FLAGS_MASK	(PKCS11_CKA_VENDOR_DEFINED | \
 					 0x00FF0000UL)
 
+/**
+ * PKCS11_CKA_OPTEE_FLAGS_HIDDEN defines attribute that will not be exported
+ * from PKCS11 TA to user space. From user space point of view the attribute
+ * does not exist.
+ */
+#define PKCS11_CKA_OPTEE_FLAGS_HIDDEN	(PKCS11_CKA_VENDOR_DEFINED | \
+					 0x00010000UL)
+
 /*
  * Attribute identification IDs as of v2.40 excluding deprecated IDs.
  * Valid values for struct pkcs11_attribute_head::id
diff --git a/ta/pkcs11/src/attributes.c b/ta/pkcs11/src/attributes.c
index af2d5a72b53..1083ceae860 100644
--- a/ta/pkcs11/src/attributes.c
+++ b/ta/pkcs11/src/attributes.c
@@ -264,6 +264,10 @@ bool attributes_match_reference(struct obj_attrs *candidate,
 
 		TEE_MemMove(&pkcs11_ref, ref_attr, sizeof(pkcs11_ref));
 
+		/* Hidden attributes cannot be matched */
+		if (attribute_is_hidden(&pkcs11_ref))
+			return false;
+
 		rc = get_attribute_ptr(candidate, pkcs11_ref.id, &value, &size);
 
 		if (rc || !value || size != pkcs11_ref.size ||
diff --git a/ta/pkcs11/src/object.c b/ta/pkcs11/src/object.c
index 1b9c954bd07..053237bc346 100644
--- a/ta/pkcs11/src/object.c
+++ b/ta/pkcs11/src/object.c
@@ -833,6 +833,15 @@ enum pkcs11_rc entry_get_attribute_value(struct pkcs11_client *client,
 
 		len = sizeof(*cli_ref) + cli_head.size;
 
+		/* Treat hidden attributes as missing attributes */
+		if (attribute_is_hidden(&cli_head)) {
+			cli_head.size = PKCS11_CK_UNAVAILABLE_INFORMATION;
+			TEE_MemMove(&cli_ref->size, &cli_head.size,
+				    sizeof(cli_head.size));
+			attr_type_invalid = 1;
+			continue;
+		}
+
 		/* We don't support getting value of indirect templates */
 		if (pkcs11_attr_has_indirect_attributes(cli_head.id)) {
 			attr_type_invalid = 1;
diff --git a/ta/pkcs11/src/pkcs11_attributes.c b/ta/pkcs11/src/pkcs11_attributes.c
index 2bdfd7ed404..ebfd914b48e 100644
--- a/ta/pkcs11/src/pkcs11_attributes.c
+++ b/ta/pkcs11/src/pkcs11_attributes.c
@@ -1862,6 +1862,12 @@ check_parent_attrs_against_processing(enum pkcs11_mechanism_id proc_id,
 	return PKCS11_CKR_OK;
 }
 
+bool attribute_is_hidden(struct pkcs11_attribute_head *req_attr)
+{
+	return (req_attr->id & PKCS11_CKA_OPTEE_FLAGS_HIDDEN) ==
+		PKCS11_CKA_OPTEE_FLAGS_HIDDEN;
+}
+
 bool attribute_is_exportable(struct pkcs11_attribute_head *req_attr,
 			     struct pkcs11_object *obj)
 {
@@ -2132,6 +2138,10 @@ enum pkcs11_rc check_attrs_against_modification(struct pkcs11_session *session,
 		TEE_MemMove(&cli_ref, cur, sizeof(cli_ref));
 		len = sizeof(cli_ref) + cli_ref.size;
 
+		/* Protect hidden attributes */
+		if (attribute_is_hidden(&cli_ref))
+			return PKCS11_CKR_ATTRIBUTE_TYPE_INVALID;
+
 		/*
 		 * Check 1 - Check if attribute belongs to the object
 		 * The obj->attributes has all the attributes in
diff --git a/ta/pkcs11/src/pkcs11_attributes.h b/ta/pkcs11/src/pkcs11_attributes.h
index 270ccf2424c..6c9823b2bd1 100644
--- a/ta/pkcs11/src/pkcs11_attributes.h
+++ b/ta/pkcs11/src/pkcs11_attributes.h
@@ -162,6 +162,8 @@ check_mechanism_against_processing(struct pkcs11_session *session,
 				   enum processing_func function,
 				   enum processing_step step);
 
+bool attribute_is_hidden(struct pkcs11_attribute_head *req_attr);
+
 bool attribute_is_exportable(struct pkcs11_attribute_head *req_attr,
 			     struct pkcs11_object *obj);
 

From 0a80772a118cd76ba79529a6c74bb94df630f3ba Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Vesa=20J=C3=A4=C3=A4skel=C3=A4inen?=
 <vesa.jaaskelainen@vaisala.com>
Date: Thu, 27 Jul 2023 15:56:58 +0300
Subject: [PATCH 4/5] ta: pkcs11: add hidden EC point support
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

The PKCS#11 standard does not allow one to have CKA_EC_POINT for private
keys but TEE internal API requires one to be present when performing
private key operations. Instead of calculating it each time it is needed
store it as hidden attribute.

This fixes EC private key generation to function as specified in standard.

There is backwards support for existing keys that has been created
inadvertently with CKA_EC_POINT included.

Signed-off-by: Vesa Jääskeläinen <vesa.jaaskelainen@vaisala.com>
---
 ta/pkcs11/include/pkcs11_ta.h  | 12 ++++++++++++
 ta/pkcs11/src/pkcs11_helpers.c | 29 ++++++++++++++++++++---------
 ta/pkcs11/src/processing_ec.c  | 25 +++++++++++++++++++++----
 3 files changed, 53 insertions(+), 13 deletions(-)

diff --git a/ta/pkcs11/include/pkcs11_ta.h b/ta/pkcs11/include/pkcs11_ta.h
index 291fcd2aaa8..9b2df4bca56 100644
--- a/ta/pkcs11/include/pkcs11_ta.h
+++ b/ta/pkcs11/include/pkcs11_ta.h
@@ -1186,7 +1186,19 @@ enum pkcs11_attr_id {
 	PKCS11_CKA_SUPPORTED_CMS_ATTRIBUTES	= 0x0503,
 	PKCS11_CKA_ALLOWED_MECHANISMS		= PKCS11_CKF_ARRAY_ATTRIBUTE |
 						  0x0600,
+
+	/* Vendor specific attributes */
+
+	/**
+	 * TEE Internal API requires to have EC public key information
+	 * available for private key operations. As EC private key object
+	 * should not include CKA_EC_POINT include hidden one so that it does
+	 * not need to be calculated on each operation.
 	 */
+	PKCS11_CKA_OPTEE_HIDDEN_EC_POINT = PKCS11_CKA_VENDOR_DEFINED |
+					   PKCS11_CKA_OPTEE_FLAGS_HIDDEN |
+					   0x0000,
+
 	/* Vendor extension: reserved for undefined ID (~0U) */
 	PKCS11_CKA_UNDEFINED_ID			= PKCS11_UNDEFINED_ID,
 };
diff --git a/ta/pkcs11/src/pkcs11_helpers.c b/ta/pkcs11/src/pkcs11_helpers.c
index fc68c11397d..364c7e63069 100644
--- a/ta/pkcs11/src/pkcs11_helpers.c
+++ b/ta/pkcs11/src/pkcs11_helpers.c
@@ -97,6 +97,7 @@ static const struct attr_size attr_ids[] = {
 	PKCS11_ID_SZ(PKCS11_CKA_ALWAYS_AUTHENTICATE, 1),
 	PKCS11_ID_SZ(PKCS11_CKA_WRAP_WITH_TRUSTED, 1),
 	/* Specific PKCS11 TA internal attribute ID */
+	PKCS11_ID_SZ(PKCS11_CKA_OPTEE_HIDDEN_EC_POINT, 0),
 	PKCS11_ID_SZ(PKCS11_CKA_UNDEFINED_ID, 0),
 };
 
@@ -575,16 +576,26 @@ bool pkcs2tee_load_attr(TEE_Attribute *tee_ref, uint32_t tee_id,
 
 		data32 = (ec_params2tee_keysize(a_ptr, a_size) + 7) / 8;
 
-		if (get_attribute_ptr(obj->attributes, PKCS11_CKA_EC_POINT,
+		/*
+		 * For private keys we need EC public key for TEE operations so
+		 * first try to get hidden EC POINT and as backwards
+		 * compatibility also check for CKA_EC_POINT.
+		 *
+		 * For public keys we only have CKA_EC_POINT but there is no
+		 * harm to check for hidden one too.
+		 */
+		if (get_attribute_ptr(obj->attributes,
+				      PKCS11_CKA_OPTEE_HIDDEN_EC_POINT,
 				      &a_ptr, &a_size)) {
-			/*
-			 * Public X/Y is required for both TEE keypair and
-			 * public key, so abort if EC_POINT is not provided
-			 * during object import.
-			 */
-
-			EMSG("Missing EC_POINT attribute");
-			return false;
+			if (get_attribute_ptr(obj->attributes,
+					      PKCS11_CKA_EC_POINT,
+					      &a_ptr, &a_size)) {
+				/*
+				 * Without EC public key we cannot proceed.
+				 */
+				EMSG("Missing EC_POINT attribute");
+				return false;
+			}
 		}
 
 		der_ptr = (uint8_t *)a_ptr;
diff --git a/ta/pkcs11/src/processing_ec.c b/ta/pkcs11/src/processing_ec.c
index a90966a9118..adf9b5e096d 100644
--- a/ta/pkcs11/src/processing_ec.c
+++ b/ta/pkcs11/src/processing_ec.c
@@ -388,14 +388,29 @@ enum pkcs11_rc load_tee_ec_key_attrs(TEE_Attribute **tee_attrs,
 				       obj, PKCS11_CKA_VALUE))
 			count++;
 
+		/*
+		 * Standard does not have CKA_EC_POINT for EC private keys
+		 * but that is required by TEE internal API. First try to get
+		 * hidden EC POINT and for backwards compatibility then try to
+		 * get CKA_EC_POINT value.
+		 */
+
 		if (pkcs2tee_load_attr(&attrs[count],
 				       TEE_ATTR_ECC_PUBLIC_VALUE_X,
-				       obj, PKCS11_CKA_EC_POINT))
+				       obj, PKCS11_CKA_OPTEE_HIDDEN_EC_POINT))
+			count++;
+		else if (pkcs2tee_load_attr(&attrs[count],
+					    TEE_ATTR_ECC_PUBLIC_VALUE_X,
+					    obj, PKCS11_CKA_EC_POINT))
 			count++;
 
 		if (pkcs2tee_load_attr(&attrs[count],
 				       TEE_ATTR_ECC_PUBLIC_VALUE_Y,
-				       obj, PKCS11_CKA_EC_POINT))
+				       obj, PKCS11_CKA_OPTEE_HIDDEN_EC_POINT))
+			count++;
+		else if (pkcs2tee_load_attr(&attrs[count],
+					    TEE_ATTR_ECC_PUBLIC_VALUE_Y,
+					    obj, PKCS11_CKA_EC_POINT))
 			count++;
 
 		if (count == 4)
@@ -549,11 +564,13 @@ static enum pkcs11_rc tee2pkcs_ec_attributes(struct obj_attrs **pub_head,
 	TEE_MemMove(ecpoint + hsize + psize + poffset, y_ptr, y_size);
 
 	/*
-	 * Add EC_POINT on both private and public key objects as
+	 * Add PKCS11_CKA_OPTEE_HIDDEN_EC_POINT to private key object and
+	 * standard PKCS11_CKA_EC_POINT to public key objects as
 	 * TEE_PopulateTransientObject requires public x/y values
 	 * for TEE_TYPE_ECDSA_KEYPAIR.
 	 */
-	rc = add_attribute(priv_head, PKCS11_CKA_EC_POINT, ecpoint, dersize);
+	rc = add_attribute(priv_head, PKCS11_CKA_OPTEE_HIDDEN_EC_POINT,
+			   ecpoint, dersize);
 	if (rc)
 		goto ecpoint_cleanup;
 

From 60c0a719d4e676bb5dd93d03a5679f0ec367aab0 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Vesa=20J=C3=A4=C3=A4skel=C3=A4inen?=
 <vesa.jaaskelainen@vaisala.com>
Date: Sat, 29 Jul 2023 14:27:55 +0300
Subject: [PATCH 5/5] ta: pkcs11: fix EC private key import
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

When importing EC private key also generate hidden EC public key for that.

This fixes EC private key import problem.

Signed-off-by: Vesa Jääskeläinen <vesa.jaaskelainen@vaisala.com>
---
 ta/pkcs11/src/pkcs11_attributes.c | 179 ++++++++++++++++++++++++++++++
 1 file changed, 179 insertions(+)

diff --git a/ta/pkcs11/src/pkcs11_attributes.c b/ta/pkcs11/src/pkcs11_attributes.c
index aad20fae2..06471fdb5 100644
--- a/ta/pkcs11/src/pkcs11_attributes.c
+++ b/ta/pkcs11/src/pkcs11_attributes.c
@@ -5,6 +5,8 @@
 
 #include <assert.h>
 #include <inttypes.h>
+#include <mbedtls/asn1write.h>
+#include <mbedtls/ecp.h>
 #include <pkcs11_ta.h>
 #include <stdlib.h>
 #include <string_ext.h>
@@ -18,6 +20,7 @@
 #include "pkcs11_attributes.h"
 #include "pkcs11_helpers.h"
 #include "pkcs11_token.h"
+#include "processing.h"
 #include "sanitize_object.h"
 #include "serializer.h"
 #include "token_capabilities.h"
@@ -786,6 +789,180 @@ static enum pkcs11_rc create_pub_key_attributes(struct obj_attrs **out,
 	return set_attributes_opt_or_null(out, temp, oon, oon_count);
 }
 
+static enum pkcs11_rc
+create_ec_priv_key_hidden_attributes(struct obj_attrs **out,
+				     struct obj_attrs *temp,
+				     enum processing_func function)
+{
+	struct mbedtls_ecp_keypair key_pair = {};
+	mbedtls_ecp_group_id ec_curve = MBEDTLS_ECP_DP_NONE;
+	size_t buflen = 0;
+	uint8_t *buf = NULL;
+	size_t asnbuflen = 0;
+	uint8_t *asnbuf = NULL;
+	uint8_t *ptr = NULL;
+	enum pkcs11_rc rc = PKCS11_CKR_GENERAL_ERROR;
+	int tee_size = 0;
+	int tee_curve = 0;
+	void *a_ptr = NULL;
+	uint32_t a_size = 0;
+	int ret = 0;
+
+	if (function != PKCS11_FUNCTION_IMPORT)
+		return PKCS11_CKR_OK;
+
+	/*
+	 * TEE internal API requires that for private key operations there
+	 * needs to be also public key available.
+	 *
+	 * Generate hidden EC point from private key.
+	 */
+
+	if (get_attribute_ptr(temp, PKCS11_CKA_EC_PARAMS,
+			      &a_ptr, &a_size) || !a_ptr) {
+		EMSG("No EC_PARAMS attribute found in private key");
+		return PKCS11_CKR_ATTRIBUTE_TYPE_INVALID;
+	}
+
+	/* Just valdiate that curve is found */
+	tee_size = ec_params2tee_keysize(a_ptr, a_size);
+	if (!tee_size) {
+		EMSG("Unsupported EC_PARAMS curve");
+		return PKCS11_CKR_CURVE_NOT_SUPPORTED;
+	}
+
+	tee_curve = ec_params2tee_curve(a_ptr, a_size);
+
+	switch (tee_curve) {
+	case TEE_ECC_CURVE_NIST_P192:
+		ec_curve = MBEDTLS_ECP_DP_SECP192R1;
+		break;
+	case TEE_ECC_CURVE_NIST_P224:
+		ec_curve = MBEDTLS_ECP_DP_SECP224R1;
+		break;
+	case TEE_ECC_CURVE_NIST_P256:
+		ec_curve = MBEDTLS_ECP_DP_SECP256R1;
+		break;
+	case TEE_ECC_CURVE_NIST_P384:
+		ec_curve = MBEDTLS_ECP_DP_SECP384R1;
+		break;
+	case TEE_ECC_CURVE_NIST_P521:
+		ec_curve = MBEDTLS_ECP_DP_SECP521R1;
+		break;
+	default:
+		EMSG("Failed to map EC_PARAMS to supported curve");
+		return PKCS11_CKR_CURVE_NOT_SUPPORTED;
+	}
+
+	if (get_attribute_ptr(temp, PKCS11_CKA_VALUE,
+			      &a_ptr, &a_size) || !a_ptr) {
+		EMSG("No EC_PARAMS attribute found in private key");
+		return PKCS11_CKR_ATTRIBUTE_TYPE_INVALID;
+	}
+
+	mbedtls_ecp_keypair_init(&key_pair);
+
+	ret = mbedtls_ecp_read_key(ec_curve, &key_pair, a_ptr, a_size);
+	if (ret) {
+		EMSG("Failed to parse CKA_VALUE");
+		rc = PKCS11_CKR_ATTRIBUTE_TYPE_INVALID;
+		goto out;
+	}
+
+	ret = mbedtls_ecp_mul(&key_pair.grp, &key_pair.Q, &key_pair.d,
+			      &key_pair.grp.G, NULL, NULL);
+	if (ret) {
+		EMSG("Failed to create public key");
+		goto out;
+	}
+
+	ret = mbedtls_ecp_check_privkey(&key_pair.grp, &key_pair.d);
+	if (ret) {
+		EMSG("Failed to verify private key");
+		goto out;
+	}
+
+	ret = mbedtls_ecp_check_pubkey(&key_pair.grp, &key_pair.Q);
+	if (ret) {
+		EMSG("Failed to verify public key");
+		goto out;
+	}
+
+	ret = mbedtls_ecp_point_write_binary(&key_pair.grp, &key_pair.Q,
+					     MBEDTLS_ECP_PF_UNCOMPRESSED,
+					     &buflen, NULL, 0);
+	if (ret != MBEDTLS_ERR_ECP_BUFFER_TOO_SMALL) {
+		EMSG("Failed to determine size of binary public key");
+		goto out;
+	}
+
+	buf = TEE_Malloc(buflen, TEE_MALLOC_FILL_ZERO);
+	if (!buf) {
+		EMSG("Failed to allocate memory for public key");
+		rc = PKCS11_CKR_DEVICE_MEMORY;
+		goto out;
+	}
+
+	asnbuflen = 1 /* octet string */ + 5 /* length */ + buflen;
+
+	asnbuf = TEE_Malloc(asnbuflen, TEE_MALLOC_FILL_ZERO);
+	if (!asnbuf) {
+		EMSG("Failed to allocate memory for public key");
+		rc = PKCS11_CKR_DEVICE_MEMORY;
+		goto out;
+	}
+
+	ret = mbedtls_ecp_point_write_binary(&key_pair.grp, &key_pair.Q,
+					     MBEDTLS_ECP_PF_UNCOMPRESSED,
+					     &buflen, buf, buflen);
+	if (ret) {
+		EMSG("Failed to write binary public key");
+		goto out;
+	}
+
+	/* Note: ASN.1 writing works backwards */
+	ptr = asnbuf + asnbuflen;
+
+	ret = mbedtls_asn1_write_octet_string(&ptr, asnbuf, buf, buflen);
+	if (ret < 0) {
+		EMSG("Failed to write asn1 public key");
+		goto out;
+	}
+
+	rc = add_attribute(out, PKCS11_CKA_OPTEE_HIDDEN_EC_POINT, ptr,
+			   (size_t)ret);
+
+out:
+	TEE_Free(asnbuf);
+	asnbuf = NULL;
+
+	TEE_Free(buf);
+	buf = NULL;
+
+	mbedtls_ecp_keypair_free(&key_pair);
+
+	return rc;
+}
+
+static enum pkcs11_rc
+create_priv_key_hidden_attributes(struct obj_attrs **out,
+				  struct obj_attrs *temp,
+				  enum processing_func function)
+{
+	enum pkcs11_rc rc = PKCS11_CKR_OK;
+
+	switch (get_key_type(*out)) {
+	case PKCS11_CKK_EC:
+		rc = create_ec_priv_key_hidden_attributes(out, temp, function);
+		break;
+	default:
+		/* no-op */
+		break;
+	}
+
+	return rc;
+}
+
 static enum pkcs11_rc create_priv_key_attributes(struct obj_attrs **out,
 						 struct obj_attrs *temp)
 {
@@ -1099,6 +1276,9 @@ create_attributes_from_template(struct obj_attrs **out, void *template,
 		break;
 	case PKCS11_CKO_PRIVATE_KEY:
 		rc = create_priv_key_attributes(&attrs, temp);
+		if (rc)
+			goto out;
+		rc = create_priv_key_hidden_attributes(&attrs, temp, function);
 		break;
 	default:
 		DMSG("Invalid object class %#"PRIx32"/%s",